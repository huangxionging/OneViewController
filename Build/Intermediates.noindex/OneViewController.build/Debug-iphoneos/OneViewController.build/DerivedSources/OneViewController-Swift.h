// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef ONEVIEWCONTROLLER_SWIFT_H
#define ONEVIEWCONTROLLER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="OneViewController",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class UIWindow;
@class UIApplication;
@class NSNumber;

SWIFT_CLASS("_TtC17OneViewController11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
@class UIViewController;

SWIFT_CLASS("_TtC17OneViewController18CMSwiftViewManager")
@interface CMSwiftViewManager : NSObject
/// 视图控制器存储在 Router 中的索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
/// 私有变量
/// 只有 get 方法
@property (nonatomic, weak) UIViewController * _Nullable viewController;
/// 是否重复刷新
@property (nonatomic) BOOL reapeatRefresh;
/// Path id
@property (nonatomic, copy) NSString * _Nonnull pathId;
/// 便利构造函数
/// \param viewController 视图控制器
///
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
/// 渲染函数, 此处编写布局代码/或者加载渲染视图
/// 重绘则把 self.renderView = nil, 之后重建就行
- (void)render;
/// 绘制主界面
- (void)drawingView;
/// 获取数据
- (void)getRemoteData;
/// 注册 block
- (void)registerBlock;
/// 删除 block
- (void)removeBlock;
/// 注册类
- (void)registerClass;
/// 删除类
- (void)removeClass;
/// 刷新操作
- (void)refreshAction;
/// 移除视图消失时的 block
- (void)removeViewDisappearBlock;
/// 注册视图出现时的 block
- (void)registerViewAppearBlock;
/// 读取控制器属性
/// \param forKey 属性名
///
///
/// returns:
/// 返回结果
- (id _Nullable)controllerForKey:(NSString * _Nonnull)forKey SWIFT_WARN_UNUSED_RESULT;
/// 执行操作, 用于 viewController 向 viewManager 执行操作
/// viewController 和 viewManager 之间无需使用 block 来通信,
/// viewController 和别的 viewController之间,
/// viewManager 和别的 viewManager 之间, 这几种情况使用 block 来通信
/// \param dictionary 参数为字典, 通过参数执行不同的操作
///
- (void)callActionExcuteWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17OneViewController17CMHomeViewManager")
@interface CMHomeViewManager : CMSwiftViewManager
- (void)drawingView;
- (void)homeClick;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController24CMLifeAddListViewManager")
@interface CMLifeAddListViewManager : CMSwiftViewManager
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC17OneViewController17CMSwiftRenderView")
@interface CMSwiftRenderView : UIView
/// 视图控制器存储在 Router 中的索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
/// 获得视图控制器
/// \param path 路径
///
///
/// returns:
/// 视图控制器
- (CMSwiftViewManager * _Nullable)getSwiftViewManagerBy:(NSString * _Nullable)viewManagerPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController16CMLifeRenderView")
@interface CMLifeRenderView : CMSwiftRenderView
/// xib 添加点击方法
- (IBAction)lifeClick:(id _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController17CMLifeViewManager")
@interface CMLifeViewManager : CMSwiftViewManager
- (void)drawingView;
- (void)callActionExcuteWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController18CMMomentRenderView")
@interface CMMomentRenderView : CMSwiftRenderView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController19CMMomentViewManager")
@interface CMMomentViewManager : CMSwiftViewManager
- (void)drawingView;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end

@class UILabel;
@class CMSwiftRowModel;

SWIFT_CLASS("_TtC17OneViewController20CMMyRowTableViewCell")
@interface CMMyRowTableViewCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified myInfoLabel;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)setCellWithRowModel:(CMSwiftRowModel * _Nonnull)rowModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITableView;
@class NSIndexPath;

SWIFT_CLASS("_TtC17OneViewController23CMSwiftTableViewManager")
@interface CMSwiftTableViewManager : CMSwiftViewManager <UITableViewDataSource, UITableViewDelegate>
/// 注册 tableView
/// \param tableView tableView
///
- (void)registerTableView:(UITableView * _Nonnull)tableView;
/// 注册复用标识支持 xib 和纯代码 key: cellReuseIdentifier, value: Cell Xib 名字, 也可以是 cellClass
/// \param cellReuseIdentifierDictionary 复用标识字典
///
- (void)registerNibNameForCellReuseIdentifier:(NSDictionary<NSString *, NSString *> * _Nullable)cellReuseIdentifierDictionary;
/// 注册 header footer 复用表示
/// \param headerFooterViewReuseIdentifierDictionary header footer 字典
///
- (void)registerNibNameForHeaderFooterViewReuseIdentifier:(NSDictionary<NSString *, NSString *> * _Nullable)headerFooterViewReuseIdentifierDictionary;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView sectionForSectionIndexTitle:(NSString * _Nonnull)title atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController15CMMyViewManager")
@interface CMMyViewManager : CMSwiftTableViewManager
- (void)drawingView;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController15CMRouterManager")
@interface CMRouterManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17OneViewController17CMShopViewManager")
@interface CMShopViewManager : CMSwiftViewManager
/// 直接在这个方法里添加代码布局
- (void)render;
- (void)drawingView;
- (nonnull instancetype)initWithViewController:(UIViewController * _Nullable)viewController OBJC_DESIGNATED_INITIALIZER;
@end


/// collectionView itemModel
SWIFT_CLASS("_TtC17OneViewController26CMSwiftCollectionItemModel")
@interface CMSwiftCollectionItemModel : NSObject
/// section
@property (nonatomic) NSInteger section;
/// item
@property (nonatomic) NSInteger item;
/// 是否可以移动
@property (nonatomic) BOOL canMove;
/// 是否高亮
@property (nonatomic) BOOL canHighlight;
/// 尺寸 信息
@property (nonatomic) CGSize size;
/// 复用标识
@property (nonatomic, copy) NSString * _Nullable cellWithIdentifier;
/// 类名
@property (nonatomic, copy) NSString * _Nullable cellClass;
/// 移动路由地址
@property (nonatomic, copy) NSString * _Nullable routerSelectURL;
/// pathId
@property (nonatomic, copy) NSString * _Nullable pathId;
/// 视图控制器存储索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
+ (CMSwiftCollectionItemModel * _Nonnull)modelWithDictionary:(NSDictionary<NSString *, id> * _Nullable)dictionary isAllValueToString:(BOOL)isAllValueToString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController29CMSwiftCollectionSectionModel")
@interface CMSwiftCollectionSectionModel : NSObject
/// section
@property (nonatomic) NSInteger section;
/// 边角
@property (nonatomic) UIEdgeInsets insets;
/// 最小行间距
@property (nonatomic) CGFloat minimumLineSpacing;
/// 最小列间距
@property (nonatomic) CGFloat minimumInteritemSpacing;
/// 头部大小
@property (nonatomic) CGSize referenceSizeForHeader;
/// 尾部大小
@property (nonatomic) CGSize referenceSizeForFooter;
/// 数据源
@property (nonatomic, copy) NSArray<CMSwiftCollectionItemModel *> * _Nonnull itemDataArray;
/// pathId
@property (nonatomic, copy) NSString * _Nullable pathId;
/// 视图控制器存储索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
+ (CMSwiftCollectionSectionModel * _Nonnull)modelWithDictionary:(NSDictionary<NSString *, id> * _Nullable)dictionary isAllValueToString:(BOOL)isAllValueToString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17OneViewController15CMSwiftRowModel")
@interface CMSwiftRowModel : NSObject
/// cell 标识
@property (nonatomic, copy) NSString * _Nullable cellWithIdentifier;
/// 标识第几个 section
@property (nonatomic) NSInteger section;
/// 标识第几 row
@property (nonatomic) NSInteger row;
/// 行高
@property (nonatomic) CGFloat rowHeight;
/// 类名
@property (nonatomic, copy) NSString * _Nullable cellClass;
/// 路由地址
@property (nonatomic, copy) NSString * _Nullable routerURL;
/// pathId, 页面标识
@property (nonatomic, copy) NSString * _Nullable pathId;
/// 视图控制器存储索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
+ (CMSwiftRowModel * _Nonnull)modelWithDictionary:(NSDictionary<NSString *, id> * _Nullable)dictionary isAllValueToString:(BOOL)isAllValueToString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17OneViewController19CMSwiftSectionModel")
@interface CMSwiftSectionModel : NSObject
/// row 数据源
@property (nonatomic, copy) NSArray<CMSwiftRowModel *> * _Nonnull rowDataArray;
/// section
@property (nonatomic) NSInteger section;
/// section 背景颜色
@property (nonatomic) NSInteger sectionBackgroundColor;
/// header 高度
@property (nonatomic) CGFloat headerHeight;
/// 头部标识
@property (nonatomic, copy) NSString * _Nullable headerWithIdentifier;
/// 头部类
@property (nonatomic, copy) NSString * _Nullable headerClass;
/// 头部标题
@property (nonatomic, copy) NSString * _Nullable headerTitle;
/// 索引标题
@property (nonatomic, copy) NSString * _Nullable indexTitle;
/// 标题
@property (nonatomic, copy) NSString * _Nullable title;
/// 标题颜色
@property (nonatomic) NSInteger titleColor;
/// 标题字体大小
@property (nonatomic) CGFloat titleFontSize;
/// 尾部高度
@property (nonatomic) CGFloat footerHeight;
/// 尾部标识
@property (nonatomic, copy) NSString * _Nullable footerWithIdentifier;
/// 尾部标识的类
@property (nonatomic, copy) NSString * _Nullable footerClass;
/// 尾部标题
@property (nonatomic, copy) NSString * _Nullable footerTitle;
/// pathId
@property (nonatomic, copy) NSString * _Nullable pathId;
/// 视图控制器存储索引
@property (nonatomic, copy) NSString * _Nullable viewManagerPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@interface NSObject (SWIFT_EXTENSION(OneViewController))
/// 转换成模型
/// \param dictionary 字典
///
/// \param isAllValueToString 是否全部转成字符串
///
///
/// returns:
/// model 方法
+ (NSObject * _Nonnull)modelWithDictionary:(NSDictionary<NSString *, id> * _Nullable)dictionary isAllValueToString:(BOOL)isAllValueToString SWIFT_WARN_UNUSED_RESULT;
/// 获得属性列表
///
/// returns:
/// 属性列表数组
+ (NSArray<NSString *> * _Nullable)getSwiftProperties SWIFT_WARN_UNUSED_RESULT;
/// 获得所有自己以及父类组成的属性列表
///
/// returns:
/// 属性列表
+ (NSArray<NSString *> * _Nullable)getSwiftAllSuperProperties SWIFT_WARN_UNUSED_RESULT;
/// 设置 Model
/// \param dictionary 字典
///
- (void)setModelPropertyWithDictionary:(NSDictionary<NSString *, id> * _Nullable)dictionary isAllValueToString:(BOOL)isAllValueToString;
/// 定义类的数组元素的类型使用
///
/// returns:
/// 属性名和数组元素的类型组成的字典
+ (NSDictionary<NSString *, Class> * _Nullable)objectClassInArray SWIFT_WARN_UNUSED_RESULT;
/// 模型转换时, 属性和字典中不同的字段的映射关系
///
/// returns:
/// map 字典, key 为 propertyName, value 为映射的赋值字段名
+ (NSDictionary<NSString *, NSString *> * _Nullable)mapSettingClassDictionary SWIFT_WARN_UNUSED_RESULT;
/// 模型转字典时的映射关系字典
///
/// returns:
/// 返回映射关系字典
+ (NSDictionary<NSString *, NSString *> * _Nullable)mapGettingClassDictionary SWIFT_WARN_UNUSED_RESULT;
/// 定义字典转换模型的字典
///
/// returns:
/// 属性名和类型组成的字典
+ (NSDictionary<NSString *, Class> * _Nullable)objectClassInDictionary SWIFT_WARN_UNUSED_RESULT;
/// 获得属性字典, 包括父类
///
/// returns:
/// 属性字典
- (NSDictionary<NSString *, id> * _Nonnull)getSwiftAllSuperPropertiesDictionary SWIFT_WARN_UNUSED_RESULT;
/// 获得对象的 属性字典
///
/// returns:
/// 属性字典
- (NSDictionary<NSString *, id> * _Nonnull)getSwiftPropertiesDictionary SWIFT_WARN_UNUSED_RESULT;
- (void)printDeinitInfo;
@end

@class NSBundle;

/// 新增一个扩展视图控制器
/// page.extension.view.main
SWIFT_CLASS("_TtC17OneViewController25UIExtensionViewController")
@interface UIExtensionViewController : UIViewController
/// 覆写设置参数方法
/// \param parameters 参数
///
- (void)setParameters:(id _Null_unspecified)parameters;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// page.table.view.main, 默认 拥有 tableView 的
SWIFT_CLASS("_TtC17OneViewController30UIExtensionTableViewController")
@interface UIExtensionTableViewController : UIExtensionViewController
@property (nonatomic, strong) UITableView * _Nullable tableView;
- (void)viewDidLoad;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface UITableViewCell (SWIFT_EXTENSION(OneViewController))
- (void)setCellWithRowModel:(CMSwiftRowModel * _Nonnull)rowModel;
@end


@interface UITableViewHeaderFooterView (SWIFT_EXTENSION(OneViewController))
- (void)setSectionWithWidthSectionModel:(CMSwiftSectionModel * _Nonnull)sectionModel;
@end


@interface UIViewController (SWIFT_EXTENSION(OneViewController))
/// 视图管理器路径, 统一采用前缀 + pathId 的方式
@property (nonatomic, readonly, copy) NSString * _Nonnull viewManagerPath;
/// 设置 Swift PathId 为了和 OC 中的 Category 不冲突, 都加了 Swift
@property (nonatomic, readonly, copy) NSString * _Nonnull swiftPathId;
/// 设置返回按钮
- (void)setSwiftBackButton;
/// 返回
- (void)back;
/// 注册视图控制器
/// \param className 类名
///
/// \param forPath 路径
///
- (void)registerSwiftViewManager:(CMSwiftViewManager * _Nullable)viewManager;
/// 获得视图控制器
/// \param path 路径
///
///
/// returns:
/// 视图控制器
- (CMSwiftViewManager * _Nullable)getSwiftViewManagerBy:(NSString * _Nullable)viewManagerPath SWIFT_WARN_UNUSED_RESULT;
/// 删除控制器
/// \param path 路径
///
- (void)removeSwiftViewManager;
/// 注册 swiftManager
/// \param viewManagerName viewManager 名字
///
- (void)registerSwiftViewManagerByViewManagerName:(NSString * _Nonnull)viewManagerName;
/// 绘制 Swift 的 UI
/// \param viewManager viewManager
///
- (void)drawSwiftViewUI:(CMSwiftViewManager * _Nullable)viewManager;
/// 绘制 Swift 的 UI
/// \param viewManagerName viewManager 名字
///
- (void)drawSwiftViewUIByViewManagerName:(NSString * _Nonnull)viewManagerName;
/// 是否需要左滑返回手势
///
/// returns:
/// 默认需要
- (BOOL)needPopGesture SWIFT_WARN_UNUSED_RESULT;
/// 是否需要导航栏
///
/// returns:
/// 默认需要
- (BOOL)needNavigationBar SWIFT_WARN_UNUSED_RESULT;
/// push 页面的时候是否需要隐藏 TabBar
///
/// returns:
/// 默认需要
- (BOOL)needHideTabBarWhenPushed SWIFT_WARN_UNUSED_RESULT;
/// 视图即将出现
- (void)viewWillAppear;
/// 隐藏是否导航栏
- (void)hideShowNavigationBar;
/// 是否隐藏下面的 Bar 条, 刘海屏手机才有
///
/// returns:
///
- (BOOL)viewControllerPrefersHomeIndicatorAutoHidden SWIFT_WARN_UNUSED_RESULT;
/// 设置参数
/// \param parameters 参数
///
- (void)setParameters:(id _Null_unspecified)parameters;
- (void)showXibViewWithName:(NSString * _Nonnull)name tag:(NSInteger)tag point:(CGPoint)point;
- (void)hideViewWithTag:(NSInteger)tag;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
